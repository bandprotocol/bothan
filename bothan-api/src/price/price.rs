// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/price.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:price.PriceDataRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PriceDataRequest {
    // message fields
    // @@protoc_insertion_point(field:price.PriceDataRequest.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:price.PriceDataRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PriceDataRequest {
    fn default() -> &'a PriceDataRequest {
        <PriceDataRequest as ::protobuf::Message>::default_instance()
    }
}

impl PriceDataRequest {
    pub fn new() -> PriceDataRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &PriceDataRequest| { &m.id },
            |m: &mut PriceDataRequest| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PriceDataRequest>(
            "PriceDataRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PriceDataRequest {
    const NAME: &'static str = "PriceDataRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PriceDataRequest {
        PriceDataRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PriceDataRequest {
        static instance: PriceDataRequest = PriceDataRequest {
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PriceDataRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PriceDataRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PriceDataRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PriceDataRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:price.PriceDataResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PriceDataResponse {
    // message fields
    // @@protoc_insertion_point(field:price.PriceDataResponse.price_data_list)
    pub price_data_list: ::std::vec::Vec<PriceData>,
    // special fields
    // @@protoc_insertion_point(special_field:price.PriceDataResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PriceDataResponse {
    fn default() -> &'a PriceDataResponse {
        <PriceDataResponse as ::protobuf::Message>::default_instance()
    }
}

impl PriceDataResponse {
    pub fn new() -> PriceDataResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "price_data_list",
            |m: &PriceDataResponse| { &m.price_data_list },
            |m: &mut PriceDataResponse| { &mut m.price_data_list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PriceDataResponse>(
            "PriceDataResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PriceDataResponse {
    const NAME: &'static str = "PriceDataResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.price_data_list.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.price_data_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.price_data_list {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PriceDataResponse {
        PriceDataResponse::new()
    }

    fn clear(&mut self) {
        self.price_data_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PriceDataResponse {
        static instance: PriceDataResponse = PriceDataResponse {
            price_data_list: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PriceDataResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PriceDataResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PriceDataResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PriceDataResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:price.PriceData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PriceData {
    // message fields
    // @@protoc_insertion_point(field:price.PriceData.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:price.PriceData.price)
    pub price: ::std::string::String,
    // @@protoc_insertion_point(field:price.PriceData.timestamp)
    pub timestamp: u64,
    // special fields
    // @@protoc_insertion_point(special_field:price.PriceData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PriceData {
    fn default() -> &'a PriceData {
        <PriceData as ::protobuf::Message>::default_instance()
    }
}

impl PriceData {
    pub fn new() -> PriceData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &PriceData| { &m.id },
            |m: &mut PriceData| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "price",
            |m: &PriceData| { &m.price },
            |m: &mut PriceData| { &mut m.price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &PriceData| { &m.timestamp },
            |m: &mut PriceData| { &mut m.timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PriceData>(
            "PriceData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PriceData {
    const NAME: &'static str = "PriceData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.price = is.read_string()?;
                },
                24 => {
                    self.timestamp = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.price.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.price);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.price.is_empty() {
            os.write_string(2, &self.price)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(3, self.timestamp)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PriceData {
        PriceData::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.price.clear();
        self.timestamp = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PriceData {
        static instance: PriceData = PriceData {
            id: ::std::string::String::new(),
            price: ::std::string::String::new(),
            timestamp: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PriceData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PriceData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PriceData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PriceData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11proto/price.proto\x12\x05price\"\"\n\x10PriceDataRequest\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\tR\x02id\"M\n\x11PriceDataResponse\x128\n\x0fpri\
    ce_data_list\x18\x01\x20\x03(\x0b2\x10.price.PriceDataR\rpriceDataList\"\
    O\n\tPriceData\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x14\n\x05pr\
    ice\x18\x02\x20\x01(\tR\x05price\x12\x1c\n\ttimestamp\x18\x03\x20\x01(\
    \x04R\ttimestamp2S\n\x0cPriceService\x12C\n\x0cGetPriceData\x12\x17.pric\
    e.PriceDataRequest\x1a\x18.price.PriceDataResponse\"\0B\x12Z\x10bothan-a\
    pi/priceJ\xe7\x03\n\x06\x12\x04\0\0\x11\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x02\0\x0e\n\x08\n\x01\x08\x12\x03\x03\0'\n\
    \t\n\x02\x08\x0b\x12\x03\x03\0'\n\n\n\x02\x06\0\x12\x04\x05\0\x07\x01\n\
    \n\n\x03\x06\0\x01\x12\x03\x05\x08\x14\n\x0b\n\x04\x06\0\x02\0\x12\x03\
    \x06\x02C\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x06\x06\x12\n\x0c\n\x05\
    \x06\0\x02\0\x02\x12\x03\x06\x13#\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\
    \x06.?\n\t\n\x02\x04\0\x12\x03\t\0+\n\n\n\x03\x04\0\x01\x12\x03\t\x08\
    \x18\n\x0b\n\x04\x04\0\x02\0\x12\x03\t\x1b)\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\t\x1b!\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\t\"$\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03\t'(\n\t\n\x02\x04\x01\x12\x03\x0b\0E\n\n\n\x03\x04\
    \x01\x01\x12\x03\x0b\x08\x19\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0b\x1cC\
    \n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x0b\x1c$\n\x0c\n\x05\x04\x01\x02\
    \0\x06\x12\x03\x0b%.\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0b/>\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03\x0bAB\n\n\n\x02\x04\x02\x12\x04\r\0\x11\
    \x01\n\n\n\x03\x04\x02\x01\x12\x03\r\x08\x11\n\x0b\n\x04\x04\x02\x02\0\
    \x12\x03\x0e\x02\x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x0e\x02\x08\n\
    \x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x0e\t\x0b\n\x0c\n\x05\x04\x02\x02\0\
    \x03\x12\x03\x0e\x0e\x0f\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x0f\x02\x13\
    \n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\x04\x02\
    \x02\x01\x01\x12\x03\x0f\t\x0e\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\
    \x0f\x11\x12\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x10\x02\x17\n\x0c\n\x05\
    \x04\x02\x02\x02\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\
    \x12\x03\x10\t\x12\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x10\x15\x16b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(PriceDataRequest::generated_message_descriptor_data());
            messages.push(PriceDataResponse::generated_message_descriptor_data());
            messages.push(PriceData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
