syntax = "proto3";

package query;

import "google/api/annotations.proto";

option go_package = "bothan-api/query";

// Query defines the gRPC service.
service Query {
  rpc UpdateRegistry(UpdateRegistryRequest) returns (UpdateRegistryResponse) {
    option (google.api.http).post = "/registry";
  }

  rpc SetActiveSignalIds(SetActiveSignalIdsRequest) returns (SetActiveSignalIdsResponse) {
    option (google.api.http).post = "/signal_ids";
  }

  // RPC method that returns all prices of requested signal ids.
  rpc GetPrices(GetPricesRequest) returns (GetPricesResponse) {
    option (google.api.http).get = "/prices/{signal_ids}";
  }
}

message UpdateRegistryRequest {
  string ipfs_hash = 1;
  string version = 2;
}

enum UpdateStatusCode {
  OK = 0;
  UNSUPPORTED_VERSION = 1;
  INVALID_REGISTRY = 2;
  FAILED_TO_GET_REGISTRY = 3;
}

message UpdateRegistryResponse {
  UpdateStatusCode code = 1;
}

message SetActiveSignalIdsRequest {
  repeated string signal_ids = 1;
}

message SetActiveSignalIdsResponse {
  bool success = 1;
}

// QueryPricesRequest is the request type for the PriceService/GetPrices RPC
// method.
message GetPricesRequest {
  repeated string signal_ids = 1;
}

// QueryPricesResponse is the response type for the PriceService/GetPrices RPC
// method.
message GetPricesResponse {
  repeated Price prices = 1;
}

// AssetPrice contains the price of a signal ID.
message Price {
  // The asset's signal ID.
  string signal_id = 1;
  // The asset's price.
  int64 price = 2;
  // The asset's price status.
  PriceStatus status = 3;
}

// Status is the status that defines the AssetPrice result.
enum PriceStatus {
  UNSPECIFIED = 0;
  UNSUPPORTED = 1;
  UNAVAILABLE = 2;
  AVAILABLE = 3;
}
